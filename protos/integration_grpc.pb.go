// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/integration.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntegrationService_CreateIntegration_FullMethodName    = "/integration.IntegrationService/CreateIntegration"
	IntegrationService_GetIntegration_FullMethodName       = "/integration.IntegrationService/GetIntegration"
	IntegrationService_UpdateIntegration_FullMethodName    = "/integration.IntegrationService/UpdateIntegration"
	IntegrationService_ListIntegrations_FullMethodName     = "/integration.IntegrationService/ListIntegrations"
	IntegrationService_TestIntegration_FullMethodName      = "/integration.IntegrationService/TestIntegration"
	IntegrationService_EnableIntegration_FullMethodName    = "/integration.IntegrationService/EnableIntegration"
	IntegrationService_DisableIntegration_FullMethodName   = "/integration.IntegrationService/DisableIntegration"
	IntegrationService_GetIntegrationLogs_FullMethodName   = "/integration.IntegrationService/GetIntegrationLogs"
	IntegrationService_SyncIntegration_FullMethodName      = "/integration.IntegrationService/SyncIntegration"
	IntegrationService_DeleteIntegration_FullMethodName    = "/integration.IntegrationService/DeleteIntegration"
	IntegrationService_GetIntegrationHealth_FullMethodName = "/integration.IntegrationService/GetIntegrationHealth"
	IntegrationService_ProcessWebhook_FullMethodName       = "/integration.IntegrationService/ProcessWebhook"
)

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*CreateIntegrationResponse, error)
	GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*GetIntegrationResponse, error)
	UpdateIntegration(ctx context.Context, in *UpdateIntegrationRequest, opts ...grpc.CallOption) (*UpdateIntegrationResponse, error)
	ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error)
	TestIntegration(ctx context.Context, in *TestIntegrationRequest, opts ...grpc.CallOption) (*TestIntegrationResponse, error)
	EnableIntegration(ctx context.Context, in *EnableIntegrationRequest, opts ...grpc.CallOption) (*EnableIntegrationResponse, error)
	DisableIntegration(ctx context.Context, in *DisableIntegrationRequest, opts ...grpc.CallOption) (*DisableIntegrationResponse, error)
	GetIntegrationLogs(ctx context.Context, in *GetIntegrationLogsRequest, opts ...grpc.CallOption) (*GetIntegrationLogsResponse, error)
	SyncIntegration(ctx context.Context, in *SyncIntegrationRequest, opts ...grpc.CallOption) (*SyncIntegrationResponse, error)
	DeleteIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*DeleteIntegrationResponse, error)
	GetIntegrationHealth(ctx context.Context, in *GetIntegrationHealthRequest, opts ...grpc.CallOption) (*GetIntegrationHealthResponse, error)
	ProcessWebhook(ctx context.Context, in *ProcessWebhookRequest, opts ...grpc.CallOption) (*ProcessWebhookResponse, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*CreateIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_CreateIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*GetIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) UpdateIntegration(ctx context.Context, in *UpdateIntegrationRequest, opts ...grpc.CallOption) (*UpdateIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_UpdateIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntegrationsResponse)
	err := c.cc.Invoke(ctx, IntegrationService_ListIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) TestIntegration(ctx context.Context, in *TestIntegrationRequest, opts ...grpc.CallOption) (*TestIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_TestIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) EnableIntegration(ctx context.Context, in *EnableIntegrationRequest, opts ...grpc.CallOption) (*EnableIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_EnableIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) DisableIntegration(ctx context.Context, in *DisableIntegrationRequest, opts ...grpc.CallOption) (*DisableIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_DisableIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationLogs(ctx context.Context, in *GetIntegrationLogsRequest, opts ...grpc.CallOption) (*GetIntegrationLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntegrationLogsResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetIntegrationLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) SyncIntegration(ctx context.Context, in *SyncIntegrationRequest, opts ...grpc.CallOption) (*SyncIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_SyncIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) DeleteIntegration(ctx context.Context, in *DeleteIntegrationRequest, opts ...grpc.CallOption) (*DeleteIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIntegrationResponse)
	err := c.cc.Invoke(ctx, IntegrationService_DeleteIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationHealth(ctx context.Context, in *GetIntegrationHealthRequest, opts ...grpc.CallOption) (*GetIntegrationHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntegrationHealthResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetIntegrationHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) ProcessWebhook(ctx context.Context, in *ProcessWebhookRequest, opts ...grpc.CallOption) (*ProcessWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessWebhookResponse)
	err := c.cc.Invoke(ctx, IntegrationService_ProcessWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility.
type IntegrationServiceServer interface {
	CreateIntegration(context.Context, *CreateIntegrationRequest) (*CreateIntegrationResponse, error)
	GetIntegration(context.Context, *GetIntegrationRequest) (*GetIntegrationResponse, error)
	UpdateIntegration(context.Context, *UpdateIntegrationRequest) (*UpdateIntegrationResponse, error)
	ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error)
	TestIntegration(context.Context, *TestIntegrationRequest) (*TestIntegrationResponse, error)
	EnableIntegration(context.Context, *EnableIntegrationRequest) (*EnableIntegrationResponse, error)
	DisableIntegration(context.Context, *DisableIntegrationRequest) (*DisableIntegrationResponse, error)
	GetIntegrationLogs(context.Context, *GetIntegrationLogsRequest) (*GetIntegrationLogsResponse, error)
	SyncIntegration(context.Context, *SyncIntegrationRequest) (*SyncIntegrationResponse, error)
	DeleteIntegration(context.Context, *DeleteIntegrationRequest) (*DeleteIntegrationResponse, error)
	GetIntegrationHealth(context.Context, *GetIntegrationHealthRequest) (*GetIntegrationHealthResponse, error)
	ProcessWebhook(context.Context, *ProcessWebhookRequest) (*ProcessWebhookResponse, error)
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegrationServiceServer struct{}

func (UnimplementedIntegrationServiceServer) CreateIntegration(context.Context, *CreateIntegrationRequest) (*CreateIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegration(context.Context, *GetIntegrationRequest) (*GetIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) UpdateIntegration(context.Context, *UpdateIntegrationRequest) (*UpdateIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (UnimplementedIntegrationServiceServer) TestIntegration(context.Context, *TestIntegrationRequest) (*TestIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) EnableIntegration(context.Context, *EnableIntegrationRequest) (*EnableIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) DisableIntegration(context.Context, *DisableIntegrationRequest) (*DisableIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationLogs(context.Context, *GetIntegrationLogsRequest) (*GetIntegrationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationLogs not implemented")
}
func (UnimplementedIntegrationServiceServer) SyncIntegration(context.Context, *SyncIntegrationRequest) (*SyncIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) DeleteIntegration(context.Context, *DeleteIntegrationRequest) (*DeleteIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationHealth(context.Context, *GetIntegrationHealthRequest) (*GetIntegrationHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationHealth not implemented")
}
func (UnimplementedIntegrationServiceServer) ProcessWebhook(context.Context, *ProcessWebhookRequest) (*ProcessWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWebhook not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}
func (UnimplementedIntegrationServiceServer) testEmbeddedByValue()                            {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntegrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_CreateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).CreateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_CreateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).CreateIntegration(ctx, req.(*CreateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegration(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_UpdateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UpdateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_UpdateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UpdateIntegration(ctx, req.(*UpdateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_ListIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).ListIntegrations(ctx, req.(*ListIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_TestIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).TestIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_TestIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).TestIntegration(ctx, req.(*TestIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_EnableIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).EnableIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_EnableIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).EnableIntegration(ctx, req.(*EnableIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_DisableIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DisableIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_DisableIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DisableIntegration(ctx, req.(*DisableIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetIntegrationLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationLogs(ctx, req.(*GetIntegrationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_SyncIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).SyncIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_SyncIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).SyncIntegration(ctx, req.(*SyncIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_DeleteIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DeleteIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_DeleteIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DeleteIntegration(ctx, req.(*DeleteIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetIntegrationHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationHealth(ctx, req.(*GetIntegrationHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_ProcessWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).ProcessWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_ProcessWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).ProcessWebhook(ctx, req.(*ProcessWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIntegration",
			Handler:    _IntegrationService_CreateIntegration_Handler,
		},
		{
			MethodName: "GetIntegration",
			Handler:    _IntegrationService_GetIntegration_Handler,
		},
		{
			MethodName: "UpdateIntegration",
			Handler:    _IntegrationService_UpdateIntegration_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _IntegrationService_ListIntegrations_Handler,
		},
		{
			MethodName: "TestIntegration",
			Handler:    _IntegrationService_TestIntegration_Handler,
		},
		{
			MethodName: "EnableIntegration",
			Handler:    _IntegrationService_EnableIntegration_Handler,
		},
		{
			MethodName: "DisableIntegration",
			Handler:    _IntegrationService_DisableIntegration_Handler,
		},
		{
			MethodName: "GetIntegrationLogs",
			Handler:    _IntegrationService_GetIntegrationLogs_Handler,
		},
		{
			MethodName: "SyncIntegration",
			Handler:    _IntegrationService_SyncIntegration_Handler,
		},
		{
			MethodName: "DeleteIntegration",
			Handler:    _IntegrationService_DeleteIntegration_Handler,
		},
		{
			MethodName: "GetIntegrationHealth",
			Handler:    _IntegrationService_GetIntegrationHealth_Handler,
		},
		{
			MethodName: "ProcessWebhook",
			Handler:    _IntegrationService_ProcessWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/integration.proto",
}

const (
	DataSyncService_StartSync_FullMethodName       = "/integration.DataSyncService/StartSync"
	DataSyncService_GetSyncStatus_FullMethodName   = "/integration.DataSyncService/GetSyncStatus"
	DataSyncService_ListSyncJobs_FullMethodName    = "/integration.DataSyncService/ListSyncJobs"
	DataSyncService_CancelSync_FullMethodName      = "/integration.DataSyncService/CancelSync"
	DataSyncService_RetryFailedSync_FullMethodName = "/integration.DataSyncService/RetryFailedSync"
)

// DataSyncServiceClient is the client API for DataSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSyncServiceClient interface {
	StartSync(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error)
	GetSyncStatus(ctx context.Context, in *GetSyncStatusRequest, opts ...grpc.CallOption) (*GetSyncStatusResponse, error)
	ListSyncJobs(ctx context.Context, in *ListSyncJobsRequest, opts ...grpc.CallOption) (*ListSyncJobsResponse, error)
	CancelSync(ctx context.Context, in *CancelSyncRequest, opts ...grpc.CallOption) (*CancelSyncResponse, error)
	RetryFailedSync(ctx context.Context, in *RetryFailedSyncRequest, opts ...grpc.CallOption) (*RetryFailedSyncResponse, error)
}

type dataSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSyncServiceClient(cc grpc.ClientConnInterface) DataSyncServiceClient {
	return &dataSyncServiceClient{cc}
}

func (c *dataSyncServiceClient) StartSync(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSyncResponse)
	err := c.cc.Invoke(ctx, DataSyncService_StartSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncServiceClient) GetSyncStatus(ctx context.Context, in *GetSyncStatusRequest, opts ...grpc.CallOption) (*GetSyncStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSyncStatusResponse)
	err := c.cc.Invoke(ctx, DataSyncService_GetSyncStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncServiceClient) ListSyncJobs(ctx context.Context, in *ListSyncJobsRequest, opts ...grpc.CallOption) (*ListSyncJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSyncJobsResponse)
	err := c.cc.Invoke(ctx, DataSyncService_ListSyncJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncServiceClient) CancelSync(ctx context.Context, in *CancelSyncRequest, opts ...grpc.CallOption) (*CancelSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelSyncResponse)
	err := c.cc.Invoke(ctx, DataSyncService_CancelSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSyncServiceClient) RetryFailedSync(ctx context.Context, in *RetryFailedSyncRequest, opts ...grpc.CallOption) (*RetryFailedSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryFailedSyncResponse)
	err := c.cc.Invoke(ctx, DataSyncService_RetryFailedSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSyncServiceServer is the server API for DataSyncService service.
// All implementations must embed UnimplementedDataSyncServiceServer
// for forward compatibility.
type DataSyncServiceServer interface {
	StartSync(context.Context, *StartSyncRequest) (*StartSyncResponse, error)
	GetSyncStatus(context.Context, *GetSyncStatusRequest) (*GetSyncStatusResponse, error)
	ListSyncJobs(context.Context, *ListSyncJobsRequest) (*ListSyncJobsResponse, error)
	CancelSync(context.Context, *CancelSyncRequest) (*CancelSyncResponse, error)
	RetryFailedSync(context.Context, *RetryFailedSyncRequest) (*RetryFailedSyncResponse, error)
	mustEmbedUnimplementedDataSyncServiceServer()
}

// UnimplementedDataSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataSyncServiceServer struct{}

func (UnimplementedDataSyncServiceServer) StartSync(context.Context, *StartSyncRequest) (*StartSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSync not implemented")
}
func (UnimplementedDataSyncServiceServer) GetSyncStatus(context.Context, *GetSyncStatusRequest) (*GetSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncStatus not implemented")
}
func (UnimplementedDataSyncServiceServer) ListSyncJobs(context.Context, *ListSyncJobsRequest) (*ListSyncJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncJobs not implemented")
}
func (UnimplementedDataSyncServiceServer) CancelSync(context.Context, *CancelSyncRequest) (*CancelSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSync not implemented")
}
func (UnimplementedDataSyncServiceServer) RetryFailedSync(context.Context, *RetryFailedSyncRequest) (*RetryFailedSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryFailedSync not implemented")
}
func (UnimplementedDataSyncServiceServer) mustEmbedUnimplementedDataSyncServiceServer() {}
func (UnimplementedDataSyncServiceServer) testEmbeddedByValue()                         {}

// UnsafeDataSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSyncServiceServer will
// result in compilation errors.
type UnsafeDataSyncServiceServer interface {
	mustEmbedUnimplementedDataSyncServiceServer()
}

func RegisterDataSyncServiceServer(s grpc.ServiceRegistrar, srv DataSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataSyncService_ServiceDesc, srv)
}

func _DataSyncService_StartSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServiceServer).StartSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSyncService_StartSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServiceServer).StartSync(ctx, req.(*StartSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSyncService_GetSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServiceServer).GetSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSyncService_GetSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServiceServer).GetSyncStatus(ctx, req.(*GetSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSyncService_ListSyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSyncJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServiceServer).ListSyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSyncService_ListSyncJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServiceServer).ListSyncJobs(ctx, req.(*ListSyncJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSyncService_CancelSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServiceServer).CancelSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSyncService_CancelSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServiceServer).CancelSync(ctx, req.(*CancelSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSyncService_RetryFailedSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryFailedSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSyncServiceServer).RetryFailedSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSyncService_RetryFailedSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSyncServiceServer).RetryFailedSync(ctx, req.(*RetryFailedSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSyncService_ServiceDesc is the grpc.ServiceDesc for DataSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration.DataSyncService",
	HandlerType: (*DataSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSync",
			Handler:    _DataSyncService_StartSync_Handler,
		},
		{
			MethodName: "GetSyncStatus",
			Handler:    _DataSyncService_GetSyncStatus_Handler,
		},
		{
			MethodName: "ListSyncJobs",
			Handler:    _DataSyncService_ListSyncJobs_Handler,
		},
		{
			MethodName: "CancelSync",
			Handler:    _DataSyncService_CancelSync_Handler,
		},
		{
			MethodName: "RetryFailedSync",
			Handler:    _DataSyncService_RetryFailedSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/integration.proto",
}
