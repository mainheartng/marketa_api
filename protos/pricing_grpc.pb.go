// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/pricing.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PricingService_GetPrice_FullMethodName            = "/pricing.PricingService/GetPrice"
	PricingService_CalculateOrderTotal_FullMethodName = "/pricing.PricingService/CalculateOrderTotal"
	PricingService_CreatePriceRule_FullMethodName     = "/pricing.PricingService/CreatePriceRule"
	PricingService_UpdatePriceRule_FullMethodName     = "/pricing.PricingService/UpdatePriceRule"
	PricingService_ListPriceRules_FullMethodName      = "/pricing.PricingService/ListPriceRules"
	PricingService_CreateDiscount_FullMethodName      = "/pricing.PricingService/CreateDiscount"
	PricingService_ValidateDiscount_FullMethodName    = "/pricing.PricingService/ValidateDiscount"
)

// PricingServiceClient is the client API for PricingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricingServiceClient interface {
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	CalculateOrderTotal(ctx context.Context, in *CalculateOrderTotalRequest, opts ...grpc.CallOption) (*CalculateOrderTotalResponse, error)
	CreatePriceRule(ctx context.Context, in *CreatePriceRuleRequest, opts ...grpc.CallOption) (*CreatePriceRuleResponse, error)
	UpdatePriceRule(ctx context.Context, in *UpdatePriceRuleRequest, opts ...grpc.CallOption) (*UpdatePriceRuleResponse, error)
	ListPriceRules(ctx context.Context, in *ListPriceRulesRequest, opts ...grpc.CallOption) (*ListPriceRulesResponse, error)
	CreateDiscount(ctx context.Context, in *CreateDiscountRequest, opts ...grpc.CallOption) (*CreateDiscountResponse, error)
	ValidateDiscount(ctx context.Context, in *ValidateDiscountRequest, opts ...grpc.CallOption) (*ValidateDiscountResponse, error)
}

type pricingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricingServiceClient(cc grpc.ClientConnInterface) PricingServiceClient {
	return &pricingServiceClient{cc}
}

func (c *pricingServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, PricingService_GetPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) CalculateOrderTotal(ctx context.Context, in *CalculateOrderTotalRequest, opts ...grpc.CallOption) (*CalculateOrderTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateOrderTotalResponse)
	err := c.cc.Invoke(ctx, PricingService_CalculateOrderTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) CreatePriceRule(ctx context.Context, in *CreatePriceRuleRequest, opts ...grpc.CallOption) (*CreatePriceRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePriceRuleResponse)
	err := c.cc.Invoke(ctx, PricingService_CreatePriceRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) UpdatePriceRule(ctx context.Context, in *UpdatePriceRuleRequest, opts ...grpc.CallOption) (*UpdatePriceRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePriceRuleResponse)
	err := c.cc.Invoke(ctx, PricingService_UpdatePriceRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) ListPriceRules(ctx context.Context, in *ListPriceRulesRequest, opts ...grpc.CallOption) (*ListPriceRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPriceRulesResponse)
	err := c.cc.Invoke(ctx, PricingService_ListPriceRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) CreateDiscount(ctx context.Context, in *CreateDiscountRequest, opts ...grpc.CallOption) (*CreateDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDiscountResponse)
	err := c.cc.Invoke(ctx, PricingService_CreateDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) ValidateDiscount(ctx context.Context, in *ValidateDiscountRequest, opts ...grpc.CallOption) (*ValidateDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateDiscountResponse)
	err := c.cc.Invoke(ctx, PricingService_ValidateDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PricingServiceServer is the server API for PricingService service.
// All implementations must embed UnimplementedPricingServiceServer
// for forward compatibility.
type PricingServiceServer interface {
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	CalculateOrderTotal(context.Context, *CalculateOrderTotalRequest) (*CalculateOrderTotalResponse, error)
	CreatePriceRule(context.Context, *CreatePriceRuleRequest) (*CreatePriceRuleResponse, error)
	UpdatePriceRule(context.Context, *UpdatePriceRuleRequest) (*UpdatePriceRuleResponse, error)
	ListPriceRules(context.Context, *ListPriceRulesRequest) (*ListPriceRulesResponse, error)
	CreateDiscount(context.Context, *CreateDiscountRequest) (*CreateDiscountResponse, error)
	ValidateDiscount(context.Context, *ValidateDiscountRequest) (*ValidateDiscountResponse, error)
	mustEmbedUnimplementedPricingServiceServer()
}

// UnimplementedPricingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPricingServiceServer struct{}

func (UnimplementedPricingServiceServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedPricingServiceServer) CalculateOrderTotal(context.Context, *CalculateOrderTotalRequest) (*CalculateOrderTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateOrderTotal not implemented")
}
func (UnimplementedPricingServiceServer) CreatePriceRule(context.Context, *CreatePriceRuleRequest) (*CreatePriceRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePriceRule not implemented")
}
func (UnimplementedPricingServiceServer) UpdatePriceRule(context.Context, *UpdatePriceRuleRequest) (*UpdatePriceRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePriceRule not implemented")
}
func (UnimplementedPricingServiceServer) ListPriceRules(context.Context, *ListPriceRulesRequest) (*ListPriceRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPriceRules not implemented")
}
func (UnimplementedPricingServiceServer) CreateDiscount(context.Context, *CreateDiscountRequest) (*CreateDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscount not implemented")
}
func (UnimplementedPricingServiceServer) ValidateDiscount(context.Context, *ValidateDiscountRequest) (*ValidateDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDiscount not implemented")
}
func (UnimplementedPricingServiceServer) mustEmbedUnimplementedPricingServiceServer() {}
func (UnimplementedPricingServiceServer) testEmbeddedByValue()                        {}

// UnsafePricingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricingServiceServer will
// result in compilation errors.
type UnsafePricingServiceServer interface {
	mustEmbedUnimplementedPricingServiceServer()
}

func RegisterPricingServiceServer(s grpc.ServiceRegistrar, srv PricingServiceServer) {
	// If the following call pancis, it indicates UnimplementedPricingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PricingService_ServiceDesc, srv)
}

func _PricingService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_CalculateOrderTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateOrderTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).CalculateOrderTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_CalculateOrderTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).CalculateOrderTotal(ctx, req.(*CalculateOrderTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_CreatePriceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePriceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).CreatePriceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_CreatePriceRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).CreatePriceRule(ctx, req.(*CreatePriceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_UpdatePriceRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).UpdatePriceRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_UpdatePriceRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).UpdatePriceRule(ctx, req.(*UpdatePriceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_ListPriceRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPriceRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).ListPriceRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_ListPriceRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).ListPriceRules(ctx, req.(*ListPriceRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_CreateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).CreateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_CreateDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).CreateDiscount(ctx, req.(*CreateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_ValidateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).ValidateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_ValidateDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).ValidateDiscount(ctx, req.(*ValidateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PricingService_ServiceDesc is the grpc.ServiceDesc for PricingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pricing.PricingService",
	HandlerType: (*PricingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _PricingService_GetPrice_Handler,
		},
		{
			MethodName: "CalculateOrderTotal",
			Handler:    _PricingService_CalculateOrderTotal_Handler,
		},
		{
			MethodName: "CreatePriceRule",
			Handler:    _PricingService_CreatePriceRule_Handler,
		},
		{
			MethodName: "UpdatePriceRule",
			Handler:    _PricingService_UpdatePriceRule_Handler,
		},
		{
			MethodName: "ListPriceRules",
			Handler:    _PricingService_ListPriceRules_Handler,
		},
		{
			MethodName: "CreateDiscount",
			Handler:    _PricingService_CreateDiscount_Handler,
		},
		{
			MethodName: "ValidateDiscount",
			Handler:    _PricingService_ValidateDiscount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pricing.proto",
}

const (
	TaxService_CalculateTax_FullMethodName      = "/pricing.TaxService/CalculateTax"
	TaxService_GetTaxRates_FullMethodName       = "/pricing.TaxService/GetTaxRates"
	TaxService_CreateTaxRule_FullMethodName     = "/pricing.TaxService/CreateTaxRule"
	TaxService_UpdateTaxRule_FullMethodName     = "/pricing.TaxService/UpdateTaxRule"
	TaxService_ListTaxRules_FullMethodName      = "/pricing.TaxService/ListTaxRules"
	TaxService_ValidateVatNumber_FullMethodName = "/pricing.TaxService/ValidateVatNumber"
)

// TaxServiceClient is the client API for TaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaxServiceClient interface {
	CalculateTax(ctx context.Context, in *CalculateTaxRequest, opts ...grpc.CallOption) (*CalculateTaxResponse, error)
	GetTaxRates(ctx context.Context, in *GetTaxRatesRequest, opts ...grpc.CallOption) (*GetTaxRatesResponse, error)
	CreateTaxRule(ctx context.Context, in *CreateTaxRuleRequest, opts ...grpc.CallOption) (*CreateTaxRuleResponse, error)
	UpdateTaxRule(ctx context.Context, in *UpdateTaxRuleRequest, opts ...grpc.CallOption) (*UpdateTaxRuleResponse, error)
	ListTaxRules(ctx context.Context, in *ListTaxRulesRequest, opts ...grpc.CallOption) (*ListTaxRulesResponse, error)
	ValidateVatNumber(ctx context.Context, in *ValidateVatNumberRequest, opts ...grpc.CallOption) (*ValidateVatNumberResponse, error)
}

type taxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxServiceClient(cc grpc.ClientConnInterface) TaxServiceClient {
	return &taxServiceClient{cc}
}

func (c *taxServiceClient) CalculateTax(ctx context.Context, in *CalculateTaxRequest, opts ...grpc.CallOption) (*CalculateTaxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateTaxResponse)
	err := c.cc.Invoke(ctx, TaxService_CalculateTax_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) GetTaxRates(ctx context.Context, in *GetTaxRatesRequest, opts ...grpc.CallOption) (*GetTaxRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaxRatesResponse)
	err := c.cc.Invoke(ctx, TaxService_GetTaxRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) CreateTaxRule(ctx context.Context, in *CreateTaxRuleRequest, opts ...grpc.CallOption) (*CreateTaxRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaxRuleResponse)
	err := c.cc.Invoke(ctx, TaxService_CreateTaxRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) UpdateTaxRule(ctx context.Context, in *UpdateTaxRuleRequest, opts ...grpc.CallOption) (*UpdateTaxRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaxRuleResponse)
	err := c.cc.Invoke(ctx, TaxService_UpdateTaxRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) ListTaxRules(ctx context.Context, in *ListTaxRulesRequest, opts ...grpc.CallOption) (*ListTaxRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTaxRulesResponse)
	err := c.cc.Invoke(ctx, TaxService_ListTaxRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxServiceClient) ValidateVatNumber(ctx context.Context, in *ValidateVatNumberRequest, opts ...grpc.CallOption) (*ValidateVatNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateVatNumberResponse)
	err := c.cc.Invoke(ctx, TaxService_ValidateVatNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxServiceServer is the server API for TaxService service.
// All implementations must embed UnimplementedTaxServiceServer
// for forward compatibility.
type TaxServiceServer interface {
	CalculateTax(context.Context, *CalculateTaxRequest) (*CalculateTaxResponse, error)
	GetTaxRates(context.Context, *GetTaxRatesRequest) (*GetTaxRatesResponse, error)
	CreateTaxRule(context.Context, *CreateTaxRuleRequest) (*CreateTaxRuleResponse, error)
	UpdateTaxRule(context.Context, *UpdateTaxRuleRequest) (*UpdateTaxRuleResponse, error)
	ListTaxRules(context.Context, *ListTaxRulesRequest) (*ListTaxRulesResponse, error)
	ValidateVatNumber(context.Context, *ValidateVatNumberRequest) (*ValidateVatNumberResponse, error)
	mustEmbedUnimplementedTaxServiceServer()
}

// UnimplementedTaxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaxServiceServer struct{}

func (UnimplementedTaxServiceServer) CalculateTax(context.Context, *CalculateTaxRequest) (*CalculateTaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTax not implemented")
}
func (UnimplementedTaxServiceServer) GetTaxRates(context.Context, *GetTaxRatesRequest) (*GetTaxRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxRates not implemented")
}
func (UnimplementedTaxServiceServer) CreateTaxRule(context.Context, *CreateTaxRuleRequest) (*CreateTaxRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaxRule not implemented")
}
func (UnimplementedTaxServiceServer) UpdateTaxRule(context.Context, *UpdateTaxRuleRequest) (*UpdateTaxRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaxRule not implemented")
}
func (UnimplementedTaxServiceServer) ListTaxRules(context.Context, *ListTaxRulesRequest) (*ListTaxRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaxRules not implemented")
}
func (UnimplementedTaxServiceServer) ValidateVatNumber(context.Context, *ValidateVatNumberRequest) (*ValidateVatNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateVatNumber not implemented")
}
func (UnimplementedTaxServiceServer) mustEmbedUnimplementedTaxServiceServer() {}
func (UnimplementedTaxServiceServer) testEmbeddedByValue()                    {}

// UnsafeTaxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaxServiceServer will
// result in compilation errors.
type UnsafeTaxServiceServer interface {
	mustEmbedUnimplementedTaxServiceServer()
}

func RegisterTaxServiceServer(s grpc.ServiceRegistrar, srv TaxServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaxService_ServiceDesc, srv)
}

func _TaxService_CalculateTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateTaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).CalculateTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_CalculateTax_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).CalculateTax(ctx, req.(*CalculateTaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_GetTaxRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaxRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).GetTaxRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_GetTaxRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).GetTaxRates(ctx, req.(*GetTaxRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_CreateTaxRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaxRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).CreateTaxRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_CreateTaxRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).CreateTaxRule(ctx, req.(*CreateTaxRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_UpdateTaxRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaxRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).UpdateTaxRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_UpdateTaxRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).UpdateTaxRule(ctx, req.(*UpdateTaxRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_ListTaxRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaxRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).ListTaxRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_ListTaxRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).ListTaxRules(ctx, req.(*ListTaxRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaxService_ValidateVatNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateVatNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaxServiceServer).ValidateVatNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaxService_ValidateVatNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaxServiceServer).ValidateVatNumber(ctx, req.(*ValidateVatNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaxService_ServiceDesc is the grpc.ServiceDesc for TaxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pricing.TaxService",
	HandlerType: (*TaxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateTax",
			Handler:    _TaxService_CalculateTax_Handler,
		},
		{
			MethodName: "GetTaxRates",
			Handler:    _TaxService_GetTaxRates_Handler,
		},
		{
			MethodName: "CreateTaxRule",
			Handler:    _TaxService_CreateTaxRule_Handler,
		},
		{
			MethodName: "UpdateTaxRule",
			Handler:    _TaxService_UpdateTaxRule_Handler,
		},
		{
			MethodName: "ListTaxRules",
			Handler:    _TaxService_ListTaxRules_Handler,
		},
		{
			MethodName: "ValidateVatNumber",
			Handler:    _TaxService_ValidateVatNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pricing.proto",
}
