// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/queu.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomerQueueService_CreateTicket_FullMethodName     = "/queu.CustomerQueueService/CreateTicket"
	CustomerQueueService_GetTicket_FullMethodName        = "/queu.CustomerQueueService/GetTicket"
	CustomerQueueService_UpdateTicket_FullMethodName     = "/queu.CustomerQueueService/UpdateTicket"
	CustomerQueueService_ListTickets_FullMethodName      = "/queu.CustomerQueueService/ListTickets"
	CustomerQueueService_AssignTicket_FullMethodName     = "/queu.CustomerQueueService/AssignTicket"
	CustomerQueueService_AddTicketMessage_FullMethodName = "/queu.CustomerQueueService/AddTicketMessage"
	CustomerQueueService_CloseTicket_FullMethodName      = "/queu.CustomerQueueService/CloseTicket"
	CustomerQueueService_GetQueueStats_FullMethodName    = "/queu.CustomerQueueService/GetQueueStats"
)

// CustomerQueueServiceClient is the client API for CustomerQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerQueueServiceClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*UpdateTicketResponse, error)
	ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	AssignTicket(ctx context.Context, in *AssignTicketRequest, opts ...grpc.CallOption) (*AssignTicketResponse, error)
	AddTicketMessage(ctx context.Context, in *AddTicketMessageRequest, opts ...grpc.CallOption) (*AddTicketMessageResponse, error)
	CloseTicket(ctx context.Context, in *CloseTicketRequest, opts ...grpc.CallOption) (*CloseTicketResponse, error)
	GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error)
}

type customerQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerQueueServiceClient(cc grpc.ClientConnInterface) CustomerQueueServiceClient {
	return &customerQueueServiceClient{cc}
}

func (c *customerQueueServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueueServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicketResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_GetTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueueServiceClient) UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*UpdateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTicketResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueueServiceClient) ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_ListTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueueServiceClient) AssignTicket(ctx context.Context, in *AssignTicketRequest, opts ...grpc.CallOption) (*AssignTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignTicketResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_AssignTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueueServiceClient) AddTicketMessage(ctx context.Context, in *AddTicketMessageRequest, opts ...grpc.CallOption) (*AddTicketMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTicketMessageResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_AddTicketMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueueServiceClient) CloseTicket(ctx context.Context, in *CloseTicketRequest, opts ...grpc.CallOption) (*CloseTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseTicketResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_CloseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueueServiceClient) GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatsResponse)
	err := c.cc.Invoke(ctx, CustomerQueueService_GetQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerQueueServiceServer is the server API for CustomerQueueService service.
// All implementations must embed UnimplementedCustomerQueueServiceServer
// for forward compatibility.
type CustomerQueueServiceServer interface {
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error)
	UpdateTicket(context.Context, *UpdateTicketRequest) (*UpdateTicketResponse, error)
	ListTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	AssignTicket(context.Context, *AssignTicketRequest) (*AssignTicketResponse, error)
	AddTicketMessage(context.Context, *AddTicketMessageRequest) (*AddTicketMessageResponse, error)
	CloseTicket(context.Context, *CloseTicketRequest) (*CloseTicketResponse, error)
	GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error)
	mustEmbedUnimplementedCustomerQueueServiceServer()
}

// UnimplementedCustomerQueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerQueueServiceServer struct{}

func (UnimplementedCustomerQueueServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedCustomerQueueServiceServer) GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedCustomerQueueServiceServer) UpdateTicket(context.Context, *UpdateTicketRequest) (*UpdateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedCustomerQueueServiceServer) ListTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedCustomerQueueServiceServer) AssignTicket(context.Context, *AssignTicketRequest) (*AssignTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTicket not implemented")
}
func (UnimplementedCustomerQueueServiceServer) AddTicketMessage(context.Context, *AddTicketMessageRequest) (*AddTicketMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTicketMessage not implemented")
}
func (UnimplementedCustomerQueueServiceServer) CloseTicket(context.Context, *CloseTicketRequest) (*CloseTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicket not implemented")
}
func (UnimplementedCustomerQueueServiceServer) GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStats not implemented")
}
func (UnimplementedCustomerQueueServiceServer) mustEmbedUnimplementedCustomerQueueServiceServer() {}
func (UnimplementedCustomerQueueServiceServer) testEmbeddedByValue()                              {}

// UnsafeCustomerQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerQueueServiceServer will
// result in compilation errors.
type UnsafeCustomerQueueServiceServer interface {
	mustEmbedUnimplementedCustomerQueueServiceServer()
}

func RegisterCustomerQueueServiceServer(s grpc.ServiceRegistrar, srv CustomerQueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerQueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerQueueService_ServiceDesc, srv)
}

func _CustomerQueueService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueueService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_GetTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueueService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).UpdateTicket(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueueService_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_ListTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).ListTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueueService_AssignTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).AssignTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_AssignTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).AssignTicket(ctx, req.(*AssignTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueueService_AddTicketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTicketMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).AddTicketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_AddTicketMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).AddTicketMessage(ctx, req.(*AddTicketMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueueService_CloseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).CloseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_CloseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).CloseTicket(ctx, req.(*CloseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueueService_GetQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueueServiceServer).GetQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueueService_GetQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueueServiceServer).GetQueueStats(ctx, req.(*GetQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerQueueService_ServiceDesc is the grpc.ServiceDesc for CustomerQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queu.CustomerQueueService",
	HandlerType: (*CustomerQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _CustomerQueueService_CreateTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _CustomerQueueService_GetTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _CustomerQueueService_UpdateTicket_Handler,
		},
		{
			MethodName: "ListTickets",
			Handler:    _CustomerQueueService_ListTickets_Handler,
		},
		{
			MethodName: "AssignTicket",
			Handler:    _CustomerQueueService_AssignTicket_Handler,
		},
		{
			MethodName: "AddTicketMessage",
			Handler:    _CustomerQueueService_AddTicketMessage_Handler,
		},
		{
			MethodName: "CloseTicket",
			Handler:    _CustomerQueueService_CloseTicket_Handler,
		},
		{
			MethodName: "GetQueueStats",
			Handler:    _CustomerQueueService_GetQueueStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/queu.proto",
}
